---
- name: installing apache tomcat on ubuntu
  become: yes
  hosts: all
  tasks:
    - name: fail if the playbook is not running on ubuntu distrubition
      ansible.builtin.fail:
        msg:" This playbook is designed to run on ubuntu only "
      when: ansible_facts['distribution'] != 'CentOs'
    - name: update and installing java 11 
      ansible.builtin.apt:
        name: "{{ java_version }}"
        update_cache: yes
        state: present
    - name: creating a group tomcat
      ansible.builtin.group:
        name: "{{ group_name }}"
        state: present
    - name: creating a system user tomcat
      ansible.builtin.user:
        name: "{{ user_name }}"
        create_home: true
        group: tomcat 
        home: "{{ home_dir }}"
        shell: "{{ default_shell }}"
        state: present
    - name: find stats of /opt/tomcat
      ansible.builtin.stat:
        path: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
      register: tomcat_stats
    - name: printing the output of tomcat_stats
      ansible.builtin.debug:
        var: tomcat_stats.stat.exists
    - name: download and extract tomcat
      ansible.builtin.unarchive:
        src: "https://dlcdn.apache.org/tomcat/tomcat-10/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "{{ home_dir }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        remote_src: yes
      when: tomcat_stats.stat.exists == false
      notify:
        - give execute permission to shell files
    - name: create a symbolic link
      ansible.builtin.file:
        src: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
        dest: "{{ home_dir }}/latest"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        state: link
    - name: change ownership of the directory
      ansible.builtin.file:
        path: "{{ home_dir }}"
        state: directory
        recurse: yes
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
    - name: create a service file
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
    - name: enable and start tomcat
      ansible.builtin.systemd:
        name: tomcat.service
        state: started
        enabled: yes
    - name: update configuration files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: tomcat-user.xml.j2, dest: "{{ home_dir }}/latest/conf/tomcat-users.xml" }
        - { src: manager_context.xml.j2, dest: "{{ home_dir }}/latest/webapps/manager/META-INF/context.xml" }
        - { src: host-manager_context.xml.j2, dest: "{{ home_dir }}/latest/webapps/host-manager/META-INF/context.xml" }
      notify:
        - restart tomcat service
  handlers:
    - name: restart tomcat service
      ansible.builtin.systemd:
        name: tomcat.service
        state: restarted
    - name: give execute permission to shell files
      ansible.builtin.shell:
        cmd: "chmod +x /opt/tomcat/latest/bin/*.sh" 
        executable: "/bin/bash"

        
        

   



